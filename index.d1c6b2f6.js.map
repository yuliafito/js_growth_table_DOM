{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCKA,IAAM,EAAkB,SAAS,aAAa,CAAC,eACzC,EAAkB,SAAS,aAAa,CAAC,eACzC,EAAqB,SAAS,aAAa,CAAC,kBAC5C,EAAqB,SAAS,aAAa,CAAC,kBAE5C,EAAQ,SAAS,aAAa,CAAC,UAC/B,EAAQ,SAAS,aAAa,CAAC,SAE/B,EAAqB,WACzB,IAAM,EAAW,EAAM,IAAI,CAAC,MAAM,CAC5B,EAAW,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,AAE3C,CAAA,EAAgB,QAAQ,CAAG,GAfZ,GAgBf,EAAgB,QAAQ,CAAG,GAfZ,EAgBf,EAAmB,QAAQ,CAAG,GAjBf,GAkBf,EAAmB,QAAQ,CAAG,GAjBf,CAkBjB,EAEA,EAAgB,gBAAgB,CAAC,QAAS,WAIxC,IAAK,IAHC,EAAM,SAAS,aAAa,CAAC,MAC7B,EAAW,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAElC,EAAI,EAAG,EAAI,EAAU,IAAK,CACjC,IAAM,EAAK,SAAS,aAAa,CAAC,MAElC,EAAI,WAAW,CAAC,EAClB,CAEA,EAAM,WAAW,CAAC,GAClB,GACF,GAEA,EAAgB,gBAAgB,CAAC,QAAS,WACpC,EAAM,IAAI,CAAC,MAAM,CAnCN,IAoCb,EAAM,SAAS,CAAC,IAChB,IAEJ,GAEA,EAAmB,gBAAgB,CAAC,QAAS,WAC1C,EAAG,EAAM,IAAI,EAAE,OAAO,CAAC,SAAC,CAAxB,EACC,IAAM,EAAK,SAAS,aAAa,CAAC,MAElC,EAAI,WAAW,CAAC,EAClB,GAEA,GACF,GAEA,EAAmB,gBAAgB,CAAC,QAAS,WACvC,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CApDf,IAqDZ,EAAG,EAAM,IAAI,EAAE,OAAO,CAAC,SAAC,CAAxB,EACC,EAAI,UAAU,CAAC,GACjB,GAEA,IAEJ","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar MAXCOUNT = 10;\nvar MINCOUNT = 2;\nvar appendRowButton = document.querySelector(\".append-row\");\nvar removeRowButton = document.querySelector(\".remove-row\");\nvar appendColumnButton = document.querySelector(\".append-column\");\nvar removeColumnButton = document.querySelector(\".remove-column\");\nvar field = document.querySelector(\".field\");\nvar tbody = document.querySelector(\"tbody\");\nvar updateButtonStates = function() {\n    var rowCount = field.rows.length;\n    var colCount = field.rows[0].cells.length;\n    appendRowButton.disabled = rowCount >= MAXCOUNT;\n    removeRowButton.disabled = rowCount <= MINCOUNT;\n    appendColumnButton.disabled = colCount >= MAXCOUNT;\n    removeColumnButton.disabled = colCount <= MINCOUNT;\n};\nappendRowButton.addEventListener(\"click\", function() {\n    var row = document.createElement(\"tr\");\n    var colCount = field.rows[0].cells.length;\n    for(var i = 0; i < colCount; i++){\n        var td = document.createElement(\"td\");\n        row.appendChild(td);\n    }\n    tbody.appendChild(row);\n    updateButtonStates();\n});\nremoveRowButton.addEventListener(\"click\", function() {\n    if (field.rows.length > MINCOUNT) {\n        field.deleteRow(-1);\n        updateButtonStates();\n    }\n});\nappendColumnButton.addEventListener(\"click\", function() {\n    _to_consumable_array(tbody.rows).forEach(function(row) {\n        var td = document.createElement(\"td\");\n        row.appendChild(td);\n    });\n    updateButtonStates();\n});\nremoveColumnButton.addEventListener(\"click\", function() {\n    if (field.rows[0].cells.length > MINCOUNT) {\n        _to_consumable_array(field.rows).forEach(function(row) {\n            row.deleteCell(-1);\n        });\n        updateButtonStates();\n    }\n});\n\n//# sourceMappingURL=index.d1c6b2f6.js.map\n","'use strict';\n\nconst MAXCOUNT = 10;\nconst MINCOUNT = 2;\n\nconst appendRowButton = document.querySelector('.append-row');\nconst removeRowButton = document.querySelector('.remove-row');\nconst appendColumnButton = document.querySelector('.append-column');\nconst removeColumnButton = document.querySelector('.remove-column');\n\nconst field = document.querySelector('.field');\nconst tbody = document.querySelector('tbody');\n\nconst updateButtonStates = () => {\n  const rowCount = field.rows.length;\n  const colCount = field.rows[0].cells.length;\n\n  appendRowButton.disabled = rowCount >= MAXCOUNT;\n  removeRowButton.disabled = rowCount <= MINCOUNT;\n  appendColumnButton.disabled = colCount >= MAXCOUNT;\n  removeColumnButton.disabled = colCount <= MINCOUNT;\n};\n\nappendRowButton.addEventListener('click', () => {\n  const row = document.createElement('tr');\n  const colCount = field.rows[0].cells.length;\n\n  for (let i = 0; i < colCount; i++) {\n    const td = document.createElement('td');\n\n    row.appendChild(td);\n  }\n\n  tbody.appendChild(row);\n  updateButtonStates();\n});\n\nremoveRowButton.addEventListener('click', () => {\n  if (field.rows.length > MINCOUNT) {\n    field.deleteRow(-1);\n    updateButtonStates();\n  }\n});\n\nappendColumnButton.addEventListener('click', () => {\n  [...tbody.rows].forEach((row) => {\n    const td = document.createElement('td');\n\n    row.appendChild(td);\n  });\n\n  updateButtonStates();\n});\n\nremoveColumnButton.addEventListener('click', () => {\n  if (field.rows[0].cells.length > MINCOUNT) {\n    [...field.rows].forEach((row) => {\n      row.deleteCell(-1);\n    });\n\n    updateButtonStates();\n  }\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","appendRowButton","document","querySelector","removeRowButton","appendColumnButton","removeColumnButton","field","tbody","updateButtonStates","rowCount","rows","colCount","cells","disabled","addEventListener","row","createElement","td","appendChild","deleteRow","forEach","deleteCell"],"version":3,"file":"index.d1c6b2f6.js.map"}